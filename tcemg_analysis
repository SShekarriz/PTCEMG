#!/bin/bash
####################################################################################
DATE=`date '+%Y-%m-%d-%H:%M'`
exec > >(tee -i TCEMG_ANALYSIS${DATE}.log)
exec 2>&1
####################################################################################

Trim=$PWD/Trimmed
Inter=$PWD/Trim_interleaved
Assem=$PWD/Trim_coassembled
binning=$PWD/Trim_binned
path1="/dataone/common/software/metabat2-V2021"
human=$PWD/Humann3

mkdir -p $Assem $Inter $binning

InterLeave=$PWD/bin/interleave_fastq.py
Spades=$PWD/bin/SPAdes-3.15.2-Linux/bin/spades.py
Samtools="/dataone/common/software/samtools-1.11/samtools"
path1="/dataone/common/software/metabat2-V2021"
LongExractor=$PWD/bin/extract_LongContig_fromFasta.py
bin_info_sorter=$PWD/bin/bin_info_sorter.R
bin_parser=$PWD/bin/bin_parser.R

echo "### Interleave reads before assembly ###"
cd $Trim
for R1 in *_R1_paired.fq.gz; do
	sample=${R1%_R1_paired.fq.gz}
	R2=${sample}_R2_paired.fq.gz
	out=$Inter/${sample}_inter.fastq
	if [ -f $out ]; then
        	echo "The file '$out' exists."
        else
        	echo "The file '$out' is not found."
        	cp ${sample}* $Inter/
                gunzip $Inter/${sample}*
                python2.7 $InterLeave $Inter/${R1%.gz} $Inter/${R2%.gz} $Inter/${sample}_inter.fastq
	fi
done

AH115=(PSWY333 PSWY352)
AT116=(PSWY362 PSWY503)    
DB113=(PSWY328 PSWY350)
DL120=(PSWY355 PSWY522)
GG119=(PSWY357 PSWY504)
MS108=(PSWY323 PSWY361)    
RS121=(PSWY353 PSWY509)
SL110=(PSWY325 PSWY354)
SM123=(PSWY349 PSWY534)
TB101=(PSWY316 PSWY330)
VP118=(PSWY359 PSWY510)

PATIENTS=(AH115 AT116 DB113 DL120 GG119 MS108 RS121 SL110 SM123 TB101 VP118)

for PT in "${PATIENTS[@]}"; do
        FMTnum="${PT}[@]"
        echo "Patient: $PT"
	sample=("${!FMTnum}")

	#raw-reads
	pe1_1=$Trim/${sample[0]}_R1_paired.fq.gz
	pe1_2=$Trim/${sample[0]}_R2_paired.fq.gz
	pe2_1=$Trim/${sample[1]}_R1_paired.fq.gz
	pe2_2=$Trim/${sample[1]}_R2_paired.fq.gz

	echo "sample 1 = $pe1_1 and $pe1_2"
	echo "sample 2 = $pe2_1 and $pe2_2"

	pe1=$Inter/${sample[0]}_inter.fastq
	pe2=$Inter/${sample[1]}_inter.fastq

	echo "Interleave Sample 1 = $pe1"
	echo "Interleave Sample 2 = $pe2"

	out=$Inter/${PT}_inter.fastq
        if [ -f $out ]; then
                echo "The file '$out' exists."
        else
                echo "The file '$out' is not found."
		cat $pe1 $pe2 > $Inter/${PT}_inter.fastq
	fi

	echo "##################################"
	echo "##### co-assembly ################"
	out=$Assem/${PT}_spade/contigs.fasta
        if [ -f $out ]; then
                echo "The file '$out' exists."
        else
                echo "The file '$out' is not found."
                python3 $Spades --meta --pe1-12 $Inter/${PT}_inter.fastq -o $Assem/${PT}_spade \
		 -t 50 --memory 1500					
        fi

        echo "################################"
        echo "#####selecting large contigs####"
        echo "################################"
	contig_file=$Assem/${PT}_spade/contigs.fasta
        ptRef=${contig_file%.fasta}_1k.fa
        if [ -f $ptRef ]; then
        echo "The file '$ptRef' exists."
        else
        echo "The file '$ptRef' is not found."
        echo "Selecting contig >= 1kb"
        python2.7 $LongExractor $contig_file
        mv ${contig_file}_out $ptRef
        fi


        echo "################################"
        echo "#indexing contigs Large contigs#"
        echo "################################"

        if [ -f ${ptRef}.fai ]; then
        echo "The file '${ptRef}.fai' exists."
        else
        echo "The file '${ptRef}.fai' is not found."
        echo "Indexing the contig file now"
        bwa index $ptRef
        samtools faidx $ptRef
        fi

	#activate conda environment
	source /home/shekas3/anaconda3/bin/activate py3

        echo "################################"
        echo "## Running Prokka on contigs ###"
        echo "################################"

	ProkkaOut=$Assem/${PT}_prokka
        ptProk=$ProkkaOut/${PT}.ffn
        if [ -f $ptProk ]; then
        echo "The file '$ptProk' exists."
        else
        echo "The file '$ptProk' is not found."
        echo "Running Prokka on the contig file now"
        prokka --cpus 25 --outdir $ProkkaOut --prefix $PT $ptRef
        fi


	#activate conda environment
	source /home/shekas3/anaconda3/bin/activate anvio-6.2

        echo "################################"
        echo "#####Building anvio contigdb####"
        echo "################################"

        ptAnvi=${ptRef%.fa}.db
        if [ -f $ptAnvi ]; then
        echo "The file '$ptAnvi' exists."
        else
        echo "The file '$ptAnvi' is not found."
        echo "Building anvio contig database"
        anvi-gen-contigs-database -f $ptRef -o $ptAnvi
        echo "Building HMMs models"
        anvi-run-hmms -c $ptAnvi
        fi


        echo "################################"
        echo "####### Short-read mapping #####"
        echo "################################"

        cover=$Assem/${PT}_cover
        prokcover=$Assem/${PT}_prokka_cover
        mkdir -p $cover $prokcover
        for sample in "${!FMTnum}"; do
                echo "Mapping $sample to $PT as follow:"
                sample_file=$Inter/${sample}_inter.fastq
                echo "Sample:$sample_file"
                echo "pt:$ptRef"
		

		if [ -f $cover/${sample}.bam ]; then
                echo "The file '$cover/${sample}.bam' exists."
                else
                echo "The file '$cover/${sample}.bam' is not found."
                echo "Mapping short-reads to assembly"
                bwa mem -t 15 -p $ptRef $sample_file | $Samtools sort -@ 15 | $Samtools view -@ 15 \
		-bS -o $cover/${sample}.bam
                fi

                if [ -f $cover/${sample}.bam.bai ]; then
                echo "The file '$cover/${sample}.bam.bai' exists."
                else
                echo "The file '$cover/${sample}.bam.bai' is not found."
                $Samtools index $cover/${sample}.bam
                fi

                if [ -f $cover/${sample}.coverage.txt ]; then
                echo "The file '$cover/${sample}.coverage.txt' exists."
                else
                echo "The file '$cover/${sample}.coverage.txt' is not found."
                echo "Calculating the number of mapped reads"
                $Samtools coverage $cover/${sample}.bam > $cover/${sample}.coverage.txt
                fi

                if [ -f $cover/${sample}.bam-ANVIO_PROFILE/PROFILE.db ]; then
                echo "The file '$cover/${sample}.bam-ANVIO_PROFILE/PROFILE.db' exists."
                else
                echo "The file '$cover/${sample}.bam-ANVIO_PROFILE' is not found."
                echo "Building anvio sample database"
                anvi-profile -i $cover/${sample}.bam -c $ptAnvi
                fi

	done

        echo "########################################"
        echo "Binning the cotnigs using Metabat"
        echo "########################################"

        BIN=${binning}/${PT}_bins
        mkdir -p $BIN

        metabat_tbl=$binning/${PT}_depthForMetabat.txt
        if [ -f $metabat_tbl ]; then
        echo "The file '$metabat_tbl' exists."
        else
        echo "The file '$metabat_tbl' is not found."
        echo "Making a coverage table from bam file for metabat2"
        $path1/jgi_summarize_bam_contig_depths --outputDepth $metabat_tbl $cover/*.bam
        fi

        if [ -f $BIN/bin.1.fa ]; then
        echo "The file '$BIN/bin.1.fa' exists."
        else
        echo "The file '$BIN/bin.1.fa' is not found."
        echo "Binning the contigs"
        $path1/metabat2 -i $ptRef -a $metabat_tbl -o $BIN/bin
        fi

        binInfo=$BIN/contig_in_bins_anvi.txt
        if [ -f $binInfo ]; then
        echo "The file '$binInfo' exists."
        else
        echo "The file '$binInfo' is not found."
        grep -e "^>" $BIN/bin* > $BIN/contig_in_bins.txt
        Rscript $bin_info_sorter $BIN/contig_in_bins.txt $binInfo
        rm $BIN/contig_in_bins.txt
        fi

        echo "################################"
        echo "#####Building anvio sampledb####"
        echo "################################"

        ptAnviProfile=$cover/SAMPLES-MERGED/PROFILE.db
        if [ -f $ptAnviProfile ]; then
        echo "The file '$ptAnviProfile' exists."
        else
        echo "The file '$ptAnviProfile' is not found."
        anvi-merge $cover/*ANVIO_PROFILE/PROFILE.db -o $cover/SAMPLES-MERGED -c $ptAnvi
        echo "Importing metabat2 bin info"
        anvi-import-collection $binInfo -p $ptAnviProfile -c $ptAnvi --contigs-mode -C metabat2
        anvi-script-add-default-collection -p $ptAnviProfile -c $ptAnvi -C default
        fi

        echo "################################"
        echo "#####Exporting coverage table###"
        echo "################################"

        ptAnviSUM_M=$cover/SAMPLES-MERGED-SUM-metabat2/bins_summary.txt
        if [ -f $ptAnviSUM_M ]; then
        echo "The file '$ptAnviSUM_M' exists."
        else
        echo "The file '$ptAnviSUM_M' is not found."
        anvi-summarize -p $ptAnviProfile -c $ptAnvi -C metabat2 -o $cover/SAMPLES-MERGED-SUM-metabat2 --init-gene-coverages
        fi

        ptAnviSUM_D=$cover/SAMPLES-MERGED-SUM-default/bins_summary.txt
        if [ -f $ptAnviSUM_D ]; then
        echo "The file '$ptAnviSUM_D' exists."
        else
        echo "The file '$ptAnviSUM_D' is not found."
        anvi-summarize -p $ptAnviProfile -c $ptAnvi -C default -o $cover/SAMPLES-MERGED-SUM-default --init-gene-coverages
        fi

        echo "#########################################"
        echo "check the quality of BINS using checkM"
        echo "##########################################"

        BINQ=${binning}/${PT}_bins_quality
        mkdir -p $BINQ
        echo "CHANGING THE CONDA ENVIRONMENT!!!!"
        source /home/shekas3/anaconda3/bin/activate py2

        if [ -f $BINQ/lineage_wf/lineage.ms ]; then
        echo "The file '$BINQ/lineage_wf/lineage.ms' exists."
        else
        echo "The file '$BINQ/lineage_wf/lineage.ms' is not found."
        checkm lineage_wf -x fa -t 10 $BIN $BINQ/lineage_wf
        fi

        if [ -f $BINQ/lineage_wf/${PT}_bin_qc.txt ]; then
        echo "The file '$BINQ/lineage_wf/${PT}_bin_qc.txt' exists."
        else
        echo "The file '$BINQ/lineage_wf/${PT}_bin_qc.txt' is not found."
        checkm qa $BINQ/lineage_wf/lineage.ms \
        $BINQ/lineage_wf -o 1 --tab_table > $BINQ/lineage_wf/${PT}_bin_qc.txt
        fi

        echo "######################################"
        echo "Running gtdbtk (taxonomy) for each bin"
        echo "######################################"

        BINT=${binning}/${PT}_bins_taxonomy
        mkdir -p $BINT
        echo "CHANGING THE CONDA ENVIRONMENT!!!!"
        source /home/shekas3/anaconda3/bin/activate gtdbtk

        gtdb_out="$BINT/classify/${PT}.bac120.summary.tsv"
        if [ -f $gtdb_out ]; then
        echo "The file '$gtdb_out' exists."
        else
        echo "The file '$gtdb_out' is not found."
        gtdbtk classify_wf --genome_dir $BIN --cpus 20 --out_dir $BINT --extension fa --prefix $PT
        fi

	echo "######################################"
        echo "Parsing all bin info into one"
        echo "######################################"

        BINSum=${binning}/${PT}_bins_summary
        mkdir -p $BINSum

        checkm=$BINQ/lineage_wf/${PT}_bin_qc.txt
        pathbincov=$cover/SAMPLES-MERGED-SUM-metabat2/bins_across_samples
        mkdir -p $pathbincov/other_files


        if [ -f $pathbincov/other_files/bins_percent_recruitment.txt ]; then
        echo "The file 'bins_percent_recruitment.txt' exists."
        else
        echo "The file 'bins_percent_recruitment.txt' is not found."
        mv $pathbincov/bins_percent_recruitment.txt $pathbincov/other_files/
        mv $pathbincov/hmm*txt $pathbincov/other_files/
        fi

        summary="$BINSum/${PT}_bin_sum_cov.txt"
        if [ -f $summary ]; then
        echo "The file '$summary' exists."
        else
        echo "The file '$summary' is not found."
        Rscript $bin_parser $checkm $gtdb_out $pathbincov $summary
        fi

        echo "######################################"
        echo "copy  all gene info in one directory"
        echo "######################################"
        ginfo=SAMPLES-MERGED-SUM-default/bin_by_bin/EVERYTHING
        gdetect=$cover/$ginfo/EVERYTHING-gene_detection.txt
        gcalls=$cover/$ginfo/EVERYTHING-gene_calls.txt
        gcov=$cover/$ginfo/EVERYTHING-gene_coverages.txt
	
        gSUM=$cover/gene_summaries
	mkdir -p $gSUM
        if [ -f $gSUM/${PT}_gene_detection.txt ]; then
        echo "the file '$gSUM/${PT}_gene_detection.txt' exists"
        else
        echo "the file '$gSUM/${PT}_gene_detection.txt' is not found"
        cp $gdetect $gSUM/${PT}_gene_detection.txt
        cp $gcalls $gSUM/${PT}_gene_calls.txt
        cp $gcov $gSUM/${PT}_gene_coverages.txt
        fi

        echo "######################################"
        echo "Finding plasmids from the assemblies #"
        echo "######################################"

        echo "CHANGING THE CONDA ENVIRONMENT!!!!"
        source /home/shekas3/anaconda3/bin/activate SCAPP
	
        assm_dir=$Assem/${PT}_spade
        graph=$assm_dir/assembly_graph.fastg
        cor=corrected/${PT}_inter
        cor_R1=$assm_dir/${cor}_1.00.0_0.cor.fastq.gz
        cor_R2=$assm_dir/${cor}_2.00.0_0.cor.fastq.gz

        out=${assm_dir}_plasmid/assembly_graph.confident_cycs.fasta
        if [ -f $out ]; then
        echo "The file '$out' exists."
        else
        echo "The file '$out' is not found."
        scapp -g $graph -o ${assm_dir}_plasmid -k 55 -r1 $cor_R1 -r2 $cor_R2 -p 25
        fi
done

echo "#########################################################"
echo "Running Humann3 on the metagenomic reads"
echo "#########################################################"
source /home/shekas3/anaconda3/bin/activate humann3
#Humann2 wants to have paired-end reads in a concatanated form, it can't properly
# use the paired-end information
mkdir -p $human

cd $Trim
for sample in *_R1_paired.fq.gz
do
        echo $sample
        basename=${sample%_R1_paired.fq.gz}
        human_out=$human/${basename}/${basename}_genefamilies.tsv
        if [ -f $human_out ]; then
        echo "the file '$human_out' exists."
        else
        echo "the file '$human_out' is not found."
        humann --input ${sample} --output $human/${basename} --threads 15
        fi
done


echo "################### DONE ####################################"
date -u
echo "#############################################################"

